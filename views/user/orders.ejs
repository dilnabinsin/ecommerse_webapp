<%- include('../partials/user/header') %>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<%- include("../../views/partials/user/loader") %>
<script src="main.js"></script>
<style>
    :root {
        --primary: #1a2526; /* Charcoal */
        --secondary: #3b4f50; /* Teal */
        --accent: #b7950b; /* Gold */
        --bg-light: #f8f9fa;
        --text-dark: #333;
        --text-muted: #666;
        --shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    body {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Roboto', sans-serif;
        color: var(--text-dark);
    }

    .banner-area {
        background: var(--bg-light);
        padding: 5px 0; /* Reduced padding */
        box-shadow: var(--shadow);
    }

    .breadcrumb-banner {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px; /* Controlled spacing */
    }

    .breadcrumb-banner h1 {
        font-family: 'Playfair Display', serif;
        font-size: 24px; /* Slightly smaller for balance */
        color: var(--primary);
        margin: 0;
    }

    .profile-image-container img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: 2px solid #fff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .ml-3 h5 {
        font-family: 'Playfair Display', serif;
        font-size: 16px;
        margin: 0;
    }

    .ml-3 p {
        font-size: 12px;
        color: var(--text-muted);
        margin: 0;
    }

    .container.mt-5 {
        padding: 20px;
        max-width: 1200px;
    }

    /* Sidebar */
    .sidebar {
        background: #fff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: var(--shadow);
    }

    .sidebar h2 {
        font-family: 'Playfair Display', serif;
        font-size: 24px;
        color: var(--primary);
        margin-bottom: 20px;
    }

    .sidebar a {
        display: flex;
        align-items: center;
        padding: 12px 0;
        color: var(--text-dark);
        text-decoration: none;
        font-size: 15px;
        transition: color 0.3s ease;
    }

    .sidebar a.active, .sidebar a:hover {
        color: var(--accent);
    }

    .sidebar a i, .sidebar a svg {
        margin-right: 12px;
        width: 16px;
        height: 16px;
    }

    .sidebar .text-danger {
        margin-top: 20px;
    }

    /* Main Content */
    .main-content h2 {
        font-family: 'Playfair Display', serif;
        font-size: 26px;
        color: var(--primary);
        margin-bottom: 20px;
    }

    .order-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: var(--shadow);
        margin-bottom: 20px;
        transition: transform 0.3s ease;
    }

    .order-card:hover {
        transform: translateY(-5px);
    }

    .order-header {
        background: var(--bg-light);
        padding: 12px 15px;
        border-radius: 12px 12px 0 0;
        font-size: 12px;
    }

    .order-header small {
        color: var(--text-muted);
        font-weight: 500;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        color: #fff;
        text-transform: uppercase;
    }

    .bg-success { background: #16a34a; }
    .bg-danger { background: #dc2626; }
    .bg-info { background: #0ea5e9; }
    .bg-warning { background: #f59e0b; }

    .order-body {
        padding: 15px;
    }

    .product-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .order-body h5 {
        font-family: 'Playfair Display', serif;
        font-size: 15px;
        color: var(--primary);
        margin: 0 0 5px;
    }

    .order-body p {
        font-size: 12px;
        color: var(--text-muted);
        margin: 0;
    }

    .btn-outline-primary, .btn-warning, .btn-outline-danger {
        padding: 5px 10px;
        font-size: 12px;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

    .btn-outline-primary {
        color: var(--primary);
        border-color: var(--primary);
    }

    .btn-outline-primary:hover {
        background: var(--primary);
        color: #fff;
    }

    .btn-warning {
        background: var(--accent);
        border-color: var(--accent);
        color: #fff;
    }

    .btn-warning:hover {
        background: #d4af37;
    }

    .btn-outline-danger {
        color: #dc2626;
        border-color: #dc2626;
    }

    .btn-outline-danger:hover {
        background: #dc2626;
        color: #fff;
    }

    /* No Orders */
    .text-center.py-5 {
        background: #fff;
        border-radius: 12px;
        box-shadow: var(--shadow);
        padding: 40px;
    }

    .text-center h3 {
        font-family: 'Playfair Display', serif;
        font-size: 22px;
        color: var(--primary);
    }

    .btn-primary {
        background: var(--primary);
        border-color: var(--primary);
        padding: 8px 16px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: var(--secondary);
    }

    /* Pagination */
    .pagination {
        justify-content: center;
        margin-top: 20px;
    }

    .pagination .page-link {
        border-radius: 6px;
        color: var(--primary);
        padding: 8px 12px;
        transition: all 0.3s ease;
    }

    .pagination .page-link:hover {
        background: var(--accent);
        color: #fff;
    }

    .pagination .page-item.active .page-link {
        background: var(--primary);
        border-color: var(--primary);
        color: #fff;
    }

    .pagination .page-item.disabled .page-link {
        color: var(--text-muted);
        background: #e9ecef;
    }

    /* Modal */
    .modal-content {
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        border-bottom: none;
        padding: 15px 20px;
    }

    .modal-title {
        font-family: 'Playfair Display', serif;
        font-size: 18px;
        color: var(--primary);
    }

    .modal-footer .btn-primary {
        background: var(--accent);
        border-color: var(--accent);
    }

    .modal-footer .btn-primary:hover {
        background: #d4af37;
    }

    /* Responsiveness */
    @media (max-width: 768px) {
        .sidebar {
            margin-bottom: 20px;
        }
        .breadcrumb-banner {
            flex-direction: column;
            align-items: flex-start;
        }
        .order-header {
            font-size: 11px;
        }
        .product-image {
            width: 50px;
            height: 50px;
        }
        .order-body h5 {
            font-size: 14px;
        }
    }
</style>

<section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner1">
            <div class="d-flex align-items-center">
                <div class="profile-image-container">
                    <!-- <img src="<%= user.profileImage || '/default-profile.png' %>" alt="Profile"> -->
                </div>
                <!-- <div class="ml-3">
                    <h5><%= user.name || 'John Doe' %></h5>
                    <p><%= user.email || 'johndoe@example.com' %></p>
                </div> -->
            </div>
            <div>
                <h1>My Orders</h1>
                <nav class="d-flex align-items-center">
                    <a href="/">Home <i class="bi bi-arrow-right"></i></a>
                    <a href="/orders">Orders</a>
                </nav>
            </div>
        </div>
    </div>
</section>

<div class="container mt-5">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3 sidebar">
            <h2>My Account</h2>
            <a href="/userProfile"><i class="bi bi-person"></i> Account Details</a>
            <a href="/address"><i class="bi bi-geo-alt"></i> Address</a>
            <a href="/orders" class="active"><i class="bi bi-cart2"></i> Orders</a>
         
            <a href="/wallet"><i class="bi bi-wallet-fill"></i> Wallet</a>
            <a href="/mycoupons"><i class="bi bi-cash"></i> My Coupons</a>
            <a href="#" onclick="confirmLogout(event)" class="text-danger"><i class="bi bi-box-arrow-right"></i> Logout</a>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 main-content">
            <h2>Your Orders</h2>
            
            <% if (orders && orders.length > 0) { %>
                <% orders.forEach(order => { %>
                    <div class="order-card">
                        <div class="order-header">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <small>ORDER PLACED</small><br>
                                    <%= new Date(order.createdOn).toLocaleDateString() %>
                                </div>
                                <div class="col-md-2">
                                    <small>TOTAL</small><br>
                                    â‚¹<%= Math.round(order.finalAmount) %>
                                </div>
                                <div class="col-md-3">
                                    <small>ORDER ID</small><br>
                                    #<%= order.orderId %>
                                </div>
                                <div class="col-md-2">
                                    <small>ORDER STATUS</small><br>
                                    <span class="status-badge <%= 
                                        order.status === 'delivered' ? 'bg-success' :
                                        order.status === 'cancelled' ? 'bg-danger' :
                                        order.status === 'shipped' ? 'bg-info' :
                                        'bg-warning'
                                    %>">
                                        <%= order.status.toUpperCase() %>
                                    </span>
                                    <% if (order.status === 'delivered') { %>
                                        <br>On <%= new Date(order.deliveredOn).toLocaleDateString() %>
                                    <% } else if (order.status === 'returned') { %>
                                        <br>On <%= new Date(order.updatedOn).toLocaleDateString() %>
                                    <% } %>
                                </div>
                                <div class="col-md-3">
                                    <small>PAYMENT METHOD</small><br>
                                    <%= order.paymentMethod === 'cod' ? 'CASH ON DELIVERY' :
                                        order.paymentMethod === 'online' ? 'ONLINE PAYMENT' :
                                        order.paymentMethod === 'wallet' ? 'WALLET PAYMENT' : 'UNKNOWN' %>
                                </div>
                            </div>
                        </div>
                        <div class="order-body">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <img src="<%= order.orderedItems[0].productImages[0] %>" 
                                         alt="<%= order.orderedItems[0].productName %>"
                                         class="product-image">
                                </div>
                                <div class="col-md-6">
                                    <a href="/productDetails?id=<%= order.orderedItems[0].product %>">
                                        <h5><%= order.orderedItems[0].productName %></h5>
                                    </a>
                                    <p>Quantity: <%= order.orderedItems[0].quantity %></p>
                                    <p>Price: â‚¹<%= (order.totalPrice / order.orderedItems[0].quantity).toFixed(2) %></p>
                                </div>
                                <div class="col-md-4 text-end">
                                    <a href="/order-details?orderId=<%= order.orderId %>" 
                                       class="btn btn-outline-primary btn-sm">View Details</a>
                                    <% if (order.status === 'delivered' && !order.returnReason && order.requestStatus !== 'rejected') { %>
                                        <button onclick="initiateReturn('<%= order._id %>')" 
                                                class="btn btn-warning btn-sm mt-2">Request Return</button>
                                    <% } else if (order.status === 'return_requested' && order.requestStatus === 'pending') { %>
                                        <button onclick="cancelReturn('<%= order._id %>')"
                                                class="btn btn-outline-danger btn-sm mt-2">Cancel Return</button>
                                    <% } else if (!['delivered', 'cancelled', 'return_requested', 'returning', 'returned'].includes(order.status)) { %>
                                        <button onclick="cancelOrder('<%= order._id %>')"
                                                class="btn btn-outline-danger btn-sm mt-2">Cancel Order</button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>

                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                        <% } %>
                    </ul>
                </nav>
            
                <div class="text-center py-5">
                    <i class="bi bi-bag fa-3x text-muted"></i>
                    <h3>No orders yet</h3>
                    <p class="text-muted">When you place an order, it will appear here.</p>
                    <a href="/shop" class="btn btn-primary mt-3">Start Shopping</a>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="mb-3">
                        <label class="form-label">Return Reason</label>
                        <select class="form-select" id="returnReason" required>
                            <option value="">Select a reason</option>
                            <option value="Wrong size">Wrong size</option>
                            <option value="Damaged product">Damaged product</option>
                            <option value="Not as described">Not as described</option>
                            <option value="Quality issues">Quality issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="returnDescription" rows="3" placeholder="Explain the issue..." required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Upload Images (Optional)</label>
                        <input type="file" class="form-control" id="returnImages" multiple accept="image/*">
                        <small class="text-muted">Max 3 images</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit</button>
            </div>
        </div>
    </div>
  
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let currentOrderId = null;

    function initiateReturn(orderId) {
        currentOrderId = orderId;
        const modal = new bootstrap.Modal(document.getElementById('returnModal'));
        modal.show();
    }

    async function submitReturn() {
        const reason = document.getElementById('returnReason').value;
        const description = document.getElementById('returnDescription').value;
        const images = document.getElementById('returnImages').files;

        if (!reason || !description) {
            Swal.fire('Error', 'Please provide a reason and description', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('orderId', currentOrderId);
        formData.append('returnReason', reason);
        formData.append('returnDescription', description);
        for (let i = 0; i < Math.min(images.length, 3); i++) {
            formData.append('images', images[i]);
        }

        try {
            const response = await fetch('/orders/return', {
                method: 'POST',
                body: formData
            });
            const data = await response.json();

            if (data.success) {
                Swal.fire('Success', 'Return request submitted!', 'success').then(() => location.reload());
            } else {
                Swal.fire('Error', data.message || 'Failed to submit return', 'error');
            }
        } catch (error) {
            Swal.fire('Error', 'An error occurred', 'error');
        }
    }

    async function cancelReturn(orderId) {
        const result = await Swal.fire({
            title: 'Cancel Return?',
            text: 'Are you sure?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/orders/cancel-return', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId })
                });
                const data = await response.json();

                if (data.success) {
                    Swal.fire('Success', 'Return request cancelled', 'success').then(() => location.reload());
                } else {
                    Swal.fire('Error', data.message || 'Failed to cancel', 'error');
                }
            } catch (error) {
                Swal.fire('Error', 'An error occurred', 'error');
            }
        }
    }
// Example frontend call using fetch
// async function cancelOrder(orderId) {
//   try {
//     console.log('Attempting to cancel order:', orderId);
    
//     const response = await fetch(`/orders/cancel/${orderId}`, {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//         'X-Debug': 'true' // Add debug header
//       },
//       credentials: 'include'
//     });
    
//     const result = await response.json();
//     console.log('Cancellation response:', result);
    
//     if (!response.ok) {
//       throw new Error(result.message || 'Failed to cancel order');
//     }
    
//     alert('Order cancelled successfully!');
//     // Refresh or update UI
    
//   } catch (error) {
//     console.error('Cancellation error:', {
//       error: error,
//       orderId: orderId,
//       time: new Date().toISOString()
//     });
//     alert(`Error: ${error.message}`);
//   }
// }
async function cancelOrder(orderId) {
    const { value: reasonOption } = await Swal.fire({
        title: 'Cancel Order',
        input: 'select',
        inputLabel: 'Select a reason for cancellation',
        inputOptions: {
            'Ordered by mistake': 'Ordered by mistake',
            'Found a better price': 'Found a better price',
            'Delivery took too long': 'Delivery took too long',
            'Item no longer needed': 'Item no longer needed',
            'Changed my mind': 'Changed my mind',
            'Wrong item ordered': 'Wrong item ordered',
            'Other': 'Other'
        },
        showCancelButton: true
    });

    if (!reasonOption) return;

    let finalReason = reasonOption;

    if (reasonOption === 'Other') {
        const { value: otherReason } = await Swal.fire({
            title: 'Cancel Order',
            input: 'textarea',
            inputLabel: 'Please provide a reason for cancellation',
            inputPlaceholder: 'Type your reason here...',
            showCancelButton: true,
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to provide a reason!';
                }
            }
        });

        if (!otherReason) return;
        finalReason = otherReason;
    }

    try {
        const response = await fetch('/orders/cancel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, reason: finalReason }),
        });

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Order cancelled successfully',
                timer: 1500
            });
            location.reload();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel order'
        });
    }
}

    function confirmLogout(event) {
        event.preventDefault();
        Swal.fire({
            title: 'Logout?',
            text: 'You will be logged out!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        }).then((result) => {
            if (result.isConfirmed) window.location.href = '/logout';
        });
    }
</script>

<%- include('../partials/user/footer') %>