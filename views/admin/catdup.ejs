<%- include("../../views/partials/admin/header") %>

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
  <style>
    :root {
      --primary-color: #3498db;
      --secondary-color: #2c3e50;
      --success-color: #2ecc71;
      --danger-color: #e74c3c;
      --info-color: #3498db;
      --light-gray: #ecf0f1;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f8f9fa;
    }

    .content-main {
      padding: 2rem;
    }

    .card {
      border: none;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
    }

    .card-header {
      background-color: var(--secondary-color);
      color: white;
      border-radius: 8px 8px 0 0;
    }

    .form-control {
      border-radius: 20px;
    }

    .btn {
      border-radius: 20px;
      padding: 0.5rem 1.5rem;
    }

    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .btn-success {
      background-color: var(--success-color);
      border-color: var(--success-color);
    }

    .btn-danger {
      background-color: var(--danger-color);
      border-color: var(--danger-color);
    }

    .btn-info {
      background-color: var(--info-color);
      border-color: var(--info-color);
    }

    .table {
      background-color: white;
    }

    .table th {
      background-color: var(--secondary-color);
      color: white;
    }

    .pagination {
      justify-content: center;
      margin-top: 2rem;
    }

    .pagination .page-link {
      color: var(--secondary-color);
      border-radius: 20px;
      margin: 0 5px;
    }

    .pagination .page-item.active .page-link {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .error-message {
      color: var(--danger-color);
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
  </style>
</head>

<body>
  <section class="content-main">
    <div class="content-header">
      <h2 class="content-title">Category Management</h2>
    </div>

    <div class="card mb-4">
      <div class="card-header">
        <h4 class="card-title mb-0">Search Categories</h4>
      </div>
      <div class="card-body">
        <form action="/admin/category/" method="get" class="mb-0">
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Search categories" name="search"/>
            <input type="number" class="form-control" placeholder="Min offer %" name="minOffer" min="0" max="99"/>
            <input type="number" class="form-control" placeholder="Max offer %" name="maxOffer" min="0" max="99"/>
            <button class="btn btn-primary" type="submit">Search</button>
          </div>
        </form>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-4">
        <div class="card mb-4">
          <div class="card-header">
            <h4 class="card-title mb-0">Add New Category</h4>
          </div>
          <div class="card-body">
            <form id="addCategoryForm" >
              <div class="mb-3">
                <label for="category_name" class="form-label">Name</label>
                <input type="text" name="name" placeholder="Category name" class="form-control" id="category_name" required/>
              </div>
              <div class="mb-3">
                <label for="category_description" class="form-label">Description</label>
                <textarea name="description" placeholder="Category description" class="form-control" id="category_description" required></textarea>
              </div>
              <button class="btn btn-primary w-100" type="submit">Create Category</button>
            </form>
          </div>
        </div>
      </div>

      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-header">
            <h4 class="card-title mb-0">Category List</h4>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                    <% cat.forEach((category) => { %>
                    <tr>
                      <td><%= category.name %></td>
                      <td><%= category.description %></td>
                      <td>
                        <%= category.categoryOffer ? `${category.categoryOffer}%` : '0%' %>
                        <% if (category.categoryOffer === 0) { %>
                          <button class="btn btn-sm btn-info" onclick="addOffer('<%= category._id %>')">Add Offer</button>
                          <% } else { %>
                          <button class="btn btn-sm btn-warning" >Edit Offer</button>
                          <button class="btn btn-sm btn-danger" onclick="deleteOffer('<%= category._id %>')" >Remove Offer</button>
                          <% } %>
                      </td>
                      <td>
                        <% if (category.isListed) { %>
                          <span id="status-<%= category._id %>" class="badge bg-success">Listed</span>
                        <% } else { %>
                          <span id="status-<%= category._id %>" class="badge bg-danger">Unlisted</span>
                        <% } %>
                      </td>
                      <td>
                        <td>
                            <% if (category.isListed) { %>
                              <button class="btn btn-sm btn-danger" onclick="unlistCategory('<%= category._id %>')">Unlist</button>
                            <% } else { %>
                              <button class="btn btn-sm btn-success" onclick="listCategory('<%= category._id %>')">List</button>
                            <% } %>
                          </td>
                          
                          
                    </tr>
                    <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <nav aria-label="Page navigation">
            <ul class="pagination">
              <% if (curentpage > 1) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= curentpage - 1 %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
              <% } %>
              
              <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= i === curentpage ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
              <% } %>
              
              <% if (curentpage < totalPages) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= curentpage + 1 %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </div>
    </section>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

  <script>
    // Add Category Form Submission
    document.getElementById('addCategoryForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const formData = new FormData(this);

      fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(Object.fromEntries(formData))
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success'
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: data.message,
            icon: 'error'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'An error occurred while adding the category',
          icon: 'error'
        });
      });
    });

    // Edit Category Function
    function editCategory(id, name, description) {
      Swal.fire({
        title: 'Edit Category',
        html:
          `<input id="swal-input1" class="swal2-input" value="${name}" placeholder="Category Name">` +
          `<textarea id="swal-input2" class="swal2-textarea" placeholder="Category Description">${description}</textarea>`,
        focusConfirm: false,
        preConfirm: () => {
          return {
            name: document.getElementById('swal-input1').value,
            description: document.getElementById('swal-input2').value
          }
        }
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/editCategory/${id}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(result.value)
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Updated!', 'Category has been updated.', 'success').then(() => {
                location.reload();
              });
            } else {
              Swal.fire('Error', data.message || 'Failed to update category', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire('Error', 'An error occurred while updating the category', 'error');
          });
        }
      });
    }

    // Function to handle listing a category
function listCategory(id) {
  fetch(`/admin/listCategory?id=${id}`, { method: 'GET' })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update the status badge
        const statusBadge = document.getElementById(`status-${id}`);
        statusBadge.className = "badge bg-success";
        statusBadge.textContent = "Listed";

        // Update the button
        const listButton = document.querySelector(`button[onclick="listCategory('${id}')"]`);
        if (listButton) {
          listButton.className = "btn btn-sm btn-danger";
          listButton.textContent = "Unlist";
          listButton.setAttribute('onclick', `unlistCategory('${id}')`);
        }

        Swal.fire('Success!', data.message, 'success');
      } else {
        Swal.fire('Error!', data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('Error!', 'An error occurred while listing the category.', 'error');
    });
}

// Function to handle unlisting a category
function unlistCategory(id) {
  fetch(`/admin/unlistCategory?id=${id}`, { method: 'GET' })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update the status badge
        const statusBadge = document.getElementById(`status-${id}`);
        statusBadge.className = "badge bg-danger";
        statusBadge.textContent = "Unlisted";

        // Update the button
        const unlistButton = document.querySelector(`button[onclick="unlistCategory('${id}')"]`);
        if (unlistButton) {
          unlistButton.className = "btn btn-sm btn-success";
          unlistButton.textContent = "List";
          unlistButton.setAttribute('onclick', `listCategory('${id}')`);
        }

        Swal.fire('Success!', data.message, 'success');
      } else {
        Swal.fire('Error!', data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('Error!', 'An error occurred while unlisting the category.', 'error');
    });
}
    function addOffer(categoryId) {
      Swal.fire({
        title: 'Add Offer',
        input: 'number',
        inputAttributes: {
          min: 1,
          max: 99,
          step: 1
        },
        showCancelButton: true,
        confirmButtonText: 'Add',
        showLoaderOnConfirm: true,
        preConfirm: (percentage) => {
          return fetch('/admin/addCategoryOffer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ categoryId, percentage: parseInt(percentage) })
          })
          .then(response => response.json())
          .then(data => {
            if (!data.status) {
              throw new Error(data.message)
            }
            return data
          })
          .catch(error => {
            Swal.showValidationMessage(`Request failed: ${error}`)
          })
        },
        allowOutsideClick: () => !Swal.isLoading()
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: 'Success!',
            text: result.value.message,
            icon: 'success'
          }).then(() => {
            location.reload();
          });
        }
      })
    }

    function editOffer(categoryId, currentOffer) {
      Swal.fire({
        title: 'Edit Offer',
        input: 'number',
        inputValue: currentOffer,
        inputAttributes: {
          min: 1,
          max: 99,
          step: 1
        },
        showCancelButton: true,
        confirmButtonText: 'Update',
        showLoaderOnConfirm: true,
        preConfirm: (percentage) => {
          return fetch('/admin/editCategoryOffer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ categoryId, percentage: parseInt(percentage) })
          })
          .then(response => response.json())
          .then(data => {
            if (!data.status) {
              throw new Error(data.message)
            }
            return data
          })
          .catch(error => {
            Swal.showValidationMessage(`Request failed: ${error}`)
          })
        },
        allowOutsideClick: () => !Swal.isLoading()
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: 'Success!',
            text: result.value.message,
            icon: 'success'
          }).then(() => {
            location.reload();
          });
        }
      })
    }

    function deleteOffer(categoryId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch('/admin/removeCategoryOffer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ categoryId })
          })
          .then(response => response.json())
          .then(data => {
            if (data.status) {
              Swal.fire(
                'Deleted!',
                'The offer has been deleted.',
                'success'
              ).then(() => {
                location.reload();
              });
            } else {
              Swal.fire(
                'Error!',
                data.message,
                'error'
              );
            }
          })
          .catch(error => {
            Swal.fire(
              'Error!',
              'An error occurred while deleting the offer.',
              'error'
            );
          });
        }
      })
    }

    function deleteCategory(categoryId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/deleteCategory/${categoryId}`, {
            method: 'DELETE',
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire(
                'Deleted!',
                'The category has been deleted.',
                'success'
              ).then(() => {
                location.reload();
              });
            } else {
              Swal.fire(
                'Error!',
                data.message,
                'error'
              );
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire(
              'Error!',
              'An error occurred while deleting the category.',
              'error'
            );
          });
        }
      });
    }



    
  </script>
</body>

<%- include("../../views/partials/admin/footer") %>

