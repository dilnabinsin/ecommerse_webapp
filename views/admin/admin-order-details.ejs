<%- include('../partials/admin/header') %>

<style>
  :root {
    --primary-color: #2c3e50; /* Deep navy for elegance */
    --secondary-color: #34495e; /* Slightly lighter navy */
    --accent-color: #e67e22; /* Warm orange for highlights */
    --success-color: #27ae60; /* Rich green */
    --danger-color: #c0392b; /* Deep red */
    --warning-color: #f1c40f; /* Golden yellow */
    --info-color: #2980b9; /* Soft blue */
    --background-color: #ecf0f1; /* Light grayish background */
    --white: #ffffff;
    --light-gray: #dcdcdc;
    --shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
    --transition: all 0.4s ease;
  }

  body {
    background-color: var(--background-color);
    font-family: 'Playfair Display', serif; /* Elegant serif font */
    color: var(--primary-color);
    line-height: 1.6;
  }

  .container-fluid {
    padding: 30px 40px;
    max-width: 1400px;
    margin: 0 auto;
  }

  h1, h5, h6 {
    font-family: 'Cinzel', serif; /* Regal font for headings */
    color:  #7b99bc;
  }
  .card {
    border: none;
    border-radius: 15px;
    box-shadow: var(--shadow);
    background: var(--white);
    overflow: hidden;
    transition: var(--transition);
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.12);
  }

  .card-header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: var(--white);
    padding: 15px 25px;
    border-radius: 15px 15px 0 0;
    border-bottom: none;
  }

  .card-body {
    padding: 25px;
  }

  .order-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .badge {
    padding: 8px 15px;
    font-size: 0.9rem;
    border-radius: 25px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .status-timeline {
    position: relative;
    margin: 40px 0;
    padding: 20px 0;
  }

  .status-line {
    position: absolute;
    top: 35px;
    left: 5%;
    right: 5%;
    height: 3px;
    background: linear-gradient(to right, var(--light-gray), var(--accent-color));
    z-index: 0;
  }

  .status-steps {
    display: flex;
    justify-content: space-between;
    position: relative;
    z-index: 1;
  }

  .status-point {
    text-align: center;
    flex: 1;
    transition: var(--transition);
  }

  .status-dot {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    margin: 0 auto 10px;
    border: 2px solid var(--white);
    transition: var(--transition);
  }

  .status-active {
    background: var(--success-color);
    box-shadow: 0 0 10px rgba(39, 174, 96, 0.6);
    transform: scale(1.2);
  }

  .status-inactive {
    background: var(--light-gray);
  }

  .status-point span {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--secondary-color);
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .customer-details, .order-summary {
    background: var(--white);
    border: 1px solid var(--light-gray);
    border-radius: 10px;
    padding: 20px;
    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.05);
  }

  .btn {
    border-radius: 10px;
    padding: 10px 20px;
    font-family: 'Lato', sans-serif; /* Clean sans-serif for buttons */
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: var(--transition);
  }

  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
  }

  .btn-success { background: var(--success-color); border: none; }
  .btn-danger { background: var(--danger-color); border: none; }
  .btn-primary { background: var(--primary-color); border: none; }

  .table {
    margin-bottom: 0;
    border-collapse: separate;
    border-spacing: 0 10px;
  }

  .table th, .table td {
    border: none;
    vertical-align: middle;
    padding: 15px;
  }

  .table thead th {
    background: var(--light-gray);
    color: var(--secondary-color);
    font-family: 'Cinzel', serif;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .table tbody tr {
    background: var(--white);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    border-radius: 8px;
    transition: var(--transition);
  }

  .table tbody tr:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .table img {
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .breadcrumb {
    background: none;
    padding: 0;
    margin-bottom: 20px;
  }

  .breadcrumb-item a {
    color: var(--accent-color);
    text-decoration: none;
    transition: var(--transition);
  }

  .breadcrumb-item a:hover {
    color: var(--primary-color);
    text-decoration: underline;
  }

  .alert {
    border-radius: 10px;
    padding: 15px;
    font-family: 'Lato', sans-serif;
  }
</style>

<div class="container-fluid">
  <h1 class="mt-4 mb-3">Order Details</h1>
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/admin/orders">Orders</a></li>
      <li class="breadcrumb-item active" aria-current="page">Order #<%= order.orderId %></li>
    </ol>
  </nav>

  <div class="row g-4">
    <!-- Main Order Details -->
    <div class="col-xl-8">
      <div class="card order-details-card">
        <div class="card-header">
          <div class="order-header">
            <h5 class="mb-0">Order #<%= order.orderId %></h5>
            <span class="badge bg-<%= 
              order.status === 'delivered' ? 'success' :
              order.status === 'cancelled' ? 'danger' :
              order.status === 'shipped' ? 'info' :
              order.status === 'return_requested' ? 'warning' :
              order.status === 'returning' ? 'info' :
              order.status === 'returned' ? 'secondary' :
              'primary'
            %>">
              <%= order.status.toUpperCase() %>
            </span>
          </div>
        </div>
        <div class="card-body">
          <!-- Status Timeline -->
          <div class="status-timeline">
            <div class="status-line"></div>
            <div class="status-steps">
              <% const statuses = ['pending', 'confirmed', 'shipped', 'delivered']; %>
              <% statuses.forEach(status => { %>
                <div class="status-point">
                  <div class="status-dot <%= order.status === status || statuses.indexOf(order.status) > statuses.indexOf(status) ? 'status-active' : 'status-inactive' %>"></div>
                  <span><%= status.toUpperCase() %></span>
                </div>
              <% }); %>
            </div>
          </div>

          <!-- Return Request Section -->
          <% if (order.status === 'return_requested') { %>
            <div class="card mb-4">
              <div class="card-header bg-warning text-white">
                <h5 class="mb-0">Return Request</h5>
              </div>
              <div class="card-body">
                <p><strong>Reason:</strong> <%= order.returnReason %></p>
                <% if (order.returnDescription) { %>
                  <p><strong>Description:</strong> <%= order.returnDescription %></p>
                <% } %>
                <% if (order.returnImages && order.returnImages.length > 0) { %>
                  <div class="d-flex flex-wrap gap-2 mt-2">
                    <% order.returnImages.forEach(image => { %>
                      <img src="<%= image %>" alt="Return image" class="img-thumbnail" style="width: 90px; height: 90px; object-fit: cover;">
                    <% }); %>
                  </div>
                <% } else { %>
                  <p>No return images available.</p>
                <% } %>
             
                <div class="d-flex gap-3">
                  <button onclick="handleReturn('approve', '<%= order._id %>')" class="btn btn-success">Approve</button>
                  <button onclick="handleReturn('reject', '<%= order._id %>')" class="btn btn-danger">Reject</button>
                </div>
              </div>
            </div>
          <% } %>

          <!-- Delivered/Returned Info -->
          <% if (order.status === 'delivered' || order.status === 'returned') { %>
            <p class="text-muted"><strong><%= order.status === 'delivered' ? 'Delivered' : 'Returned' %> On:</strong> <%= new Date(order.deliveredOn || order.updatedOn).toLocaleDateString() %></p>
          <% } %>

          <!-- Product Information -->
          <h5 class="mb-3">Products</h5>
          <div class="table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Price</th>
                  <th>Quantity</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>
                    <div class="d-flex align-items-center">
                      <img src="<%= order.orderedItems[0].productImages[0] %>" alt="<%= order.orderedItems[0].productName %>" style="width: 60px; height: 60px; object-fit: cover;" class="me-3">
                      <span><%= order.orderedItems[0].productName %></span>
                    </div>
                  </td>
                  <td>₹<%= (order.totalPrice / order.orderedItems[0].quantity).toFixed(2) %></td>
                  <td><%= order.orderedItems[0].quantity %></td>
                  <td>₹<%= order.totalPrice.toFixed(2) %></td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Order Actions -->
          <div class="mt-4">
            <h5>Actions</h5>
            <% if (order.status === 'return_requested' && order.requestStatus === 'pending') { %>
              <div class="d-flex gap-3">
                <button onclick="handleReturn('approve', '<%= order._id %>')" class="btn btn-success">Approve Return</button>
                <button onclick="handleReturn('reject', '<%= order._id %>')" class="btn btn-danger">Reject Return</button>
              </div>
            <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
              <button onclick="updateReturnStatus('<%= order._id %>')" class="btn btn-primary">Update Return Status</button>
            <% } else if (!['cancelled', 'returned', 'return_requested', 'returning', 'delivered'].includes(order.status)) { %>
              <div class="d-flex gap-3">
                <button onclick="updateStatus('<%= order._id %>')" class="btn btn-primary">Update Status</button>
                <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-danger">Cancel Order</button>
              </div>
            <% } else if (order.requestStatus === 'rejected') { %>
              <div class="alert alert-danger">
                <strong>Return Rejected</strong><br>
                <p>Category: <b><%= order.rejectionCategory %></b></p>
                <p>Reason: <%= order.rejectionReason %></p>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar: Customer & Summary -->
    <div class="col-xl-4">
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="mb-0">Customer & Order Info</h5>
        </div>
        <div class="card-body">
          <!-- Customer Details -->
          <div class="customer-details mb-4">
            <h6 class="mb-3">Shipping Address</h6>
            <p class="mb-1"><strong><%= order.address.name %></strong></p>
            <p class="mb-1"><%= order.address.streetAddress %></p>
            <p class="mb-1"><%= order.address.city %>, <%= order.address.state %>, <%= order.address.pincode %></p>
            <p class="mb-1">Phone: <%= order.address.phone %></p>
            <p class="mb-0">Email: <%= order.address.email %></p>
          </div>

          <!-- Order Summary -->
          <div class="order-summary">
            <h6 class="mb-3">Order Summary</h6>
            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal:</span>
              <span>₹<%= order.totalPrice.toFixed(2) %></span>
            </div>
            <% if (order.discount > 0) { %>
              <div class="d-flex justify-content-between mb-2 text-success">
                <span>Discount:</span>
                <span>-₹<%= order.discount.toFixed(2) %></span>
              </div>
            <% } %>
            <div class="d-flex justify-content-between mb-2">
              <span>Delivery:</span>
              <span>₹<%= order.deliveryCharge.toFixed(2) %></span>
            </div>
            <hr style="border-color: var(--light-gray);">
            <div class="d-flex justify-content-between fw-bold">
              <span>Total:</span>
              <span>₹<%= order.finalAmount.toFixed(2) %></span>
            </div>
            <div class="mt-3">
              <span class="text-muted">Payment:</span>
              <span class="badge <%= 
                order.paymentMethod === 'cod' ? 'bg-warning' :
                order.paymentMethod === 'online' ? 'bg-success' :
                'bg-info'
              %>">
                <%= order.paymentMethod.toUpperCase() %>
              </span>
            </div>
          </div>

          <!-- Order Info -->
          <div class="mt-4">
            <h6 class="mb-3">Timeline</h6>
            <p><strong>Ordered:</strong> <%= new Date(order.createdOn).toLocaleString() %></p>
            <% if (order.status === 'confirmed') { %>
              <p><strong>Confirmed:</strong> <%= new Date(order.updatedOn).toLocaleDateString() %></p>
            <% } %>
            <% if (order.status === 'shipped') { %>
              <p><strong>Shipped:</strong> <%= new Date(order.updatedOn).toLocaleDateString() %></p>
            <% } %>
            <% if (order.status === 'delivered') { %>
              <p><strong>Delivered:</strong> <%= new Date(order.deliveredOn).toLocaleDateString() %></p>
            <% } %>
            <% if (order.status === 'returned') { %>
              <p><strong>Returned:</strong> <%= new Date(order.updatedOn).toLocaleDateString() %></p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content" style="border-radius: 15px; box-shadow: var(--shadow);">
      <div class="modal-header" style="background: var(--danger-color); color: var(--white); border-radius: 15px 15px 0 0;">
        <h5 class="modal-title">Reject Return Request</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" style="padding: 25px;">
        <div class="mb-4">
          <label class="form-label" style="font-family: 'Cinzel', serif; color: var(--secondary-color);">Rejection Category</label>
          <select class="form-select" id="rejectionCategory" required style="border-radius: 8px; padding: 10px;">
            <option value="">Select a category</option>
            <option value="Invalid reason">Invalid reason</option>
            <option value="Outside return window">Outside return window</option>
            <option value="Product condition">Product condition</option>
            <option value="Policy violation">Policy violation</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-4">
          <label class="form-label" style="font-family: 'Cinzel', serif; color: var(--secondary-color);">Explanation</label>
          <textarea class="form-control" id="rejectionReason" rows="4" placeholder="Provide a detailed explanation..." required style="border-radius: 8px; padding: 10px;"></textarea>
        </div>
      </div>
      <div class="modal-footer" style="border-top: none; padding: 15px 25px;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId) {
  const { value: status } = await Swal.fire({
    title: 'Update Order Status',
    input: 'select',
    inputOptions: {
      'pending': 'Pending',
      'confirmed': 'Confirmed',
      'shipped': 'Shipped',
      'delivered': 'Delivered'
    },
    inputPlaceholder: 'Select status',
    showCancelButton: true,
    inputValidator: (value) => !value && 'Please select a status!'
  });

  if (status) {
    try {
      const response = await fetch('/admin/orders/update-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, status })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Status updated', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to update status', 'error');
    }
  }
}

async function cancelOrder(orderId) {
  const result = await Swal.fire({
    title: 'Cancel Order',
    text: 'Are you sure you want to cancel this order?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: var(--danger-color),
    cancelButtonColor: var(--primary-color),
    confirmButtonText: 'Yes, cancel it!'
  });

  if (result.isConfirmed) {
    try {
      const response = await fetch('/admin/orders/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Order cancelled', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to cancel order', 'error');
    }
  }
}

async function handleReturn(action, orderId) {
  currentOrderId = orderId;
  if (action === 'reject') {
    const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
    modal.show();
    return;
  }

  if (action === 'approve') {
    const result = await Swal.fire({
      title: 'Approve Return',
      text: 'Are you sure you want to approve this return?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: var(--primary-color),
      cancelButtonColor: var(--danger-color),
      confirmButtonText: 'Yes, approve!'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch('/admin/orders/handle-return', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, action })
        });
        const data = await response.json();
        if (data.success) {
          Swal.fire('Approved', 'Return request approved', 'success').then(() => location.reload());
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        Swal.fire('Error', error.message || 'Failed to approve return', 'error');
      }
    }
  }
}

async function submitRejection() {
  const category = document.getElementById('rejectionCategory').value;
  const reason = document.getElementById('rejectionReason').value;

  if (!category || !reason) {
    Swal.fire('Error', 'Please provide both category and explanation', 'error');
    return;
  }

  try {
    const response = await fetch('/admin/orders/handle-return', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ orderId: currentOrderId, action: 'reject', category, message: reason })
    });
    const data = await response.json();
    if (data.success) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
      modal.hide();
      Swal.fire('Rejected', 'Return request rejected', 'success').then(() => location.reload());
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    Swal.fire('Error', error.message || 'Failed to reject return', 'error');
  }
}

async function updateReturnStatus(orderId) {
  const { value: status } = await Swal.fire({
    title: 'Update Return Status',
    input: 'select',
    inputOptions: {
      'returning': 'Returning',
      'returned': 'Returned'
    },
    inputPlaceholder: 'Select status',
    showCancelButton: true,
    inputValidator: (value) => !value && 'Please select a status!'
  });

  if (status) {
    try {
      const response = await fetch('/admin/orders/update-return-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, status })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Return status updated', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to update status', 'error');
    }
  }
}
</script>

<%- include('../partials/admin/footer') %>