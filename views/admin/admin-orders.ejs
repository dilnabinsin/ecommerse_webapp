<%- include('../partials/admin/header') %>

<style>
  :root {
    --primary-color: #2b2d42; /* Deep slate blue */
    --secondary-color: #8d99ae; /* Soft gray-blue */
    --success-color: #06d6a0; /* Vibrant teal */
    --danger-color: #ef476f; /* Bold pink-red */
    --info-color: #118ab2; /* Cool blue */
    --warning-color: #ffd166; /* Warm yellow */
    --background-color: #edf2f4; /* Light neutral background */
    --white: #ffffff;
    --light-gray: #d3d8dc;
    --shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s ease;
  }

  body {
    background-color: var(--background-color);
    font-family: 'Inter', sans-serif; /* Clean, modern font */
    color: var(--primary-color);
  }

  .container-fluid {
    padding: 25px 35px;
    max-width: 1400px;
    margin: 0 auto;
  }

  h1 {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 20px;
  }

  .card {
    border: none;
    border-radius: 12px;
    background: var(--white);
    box-shadow: var(--shadow);
    transition: var(--transition);
  }

  .card-header {
    background: var(--primary-color);
    color: var(--white);
    padding: 15px 20px;
    border-radius: 12px 12px 0 0;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .card-body {
    padding: 20px;
  }

  .order-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 10px;
  }

  .order-table th {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--secondary-color);
    text-transform: uppercase;
    padding: 15px 20px;
    background: var(--light-gray);
    border-bottom: 2px solid var(--light-gray);
  }

  .order-table td {
    padding: 15px 20px;
    vertical-align: middle;
    background: var(--white);
    transition: var(--transition);
  }

  .order-table tr {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    border-radius: 8px;
  }

  .order-table tr:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .status-badge {
    padding: 6px 14px;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    color: var(--white);
    text-transform: uppercase;
    display: inline-block;
  }

  .btn {
    border-radius: 6px;
    padding: 6px 12px;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    transition: var(--transition);
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
  }

  .btn-primary { background: var(--primary-color); border: none; }
  .btn-success { background: var(--success-color); border: none; }
  .btn-danger { background: var(--danger-color); border: none; }
  .btn-info { background: var(--info-color); border: none; }

  .order-actions .btn {
    margin: 2px 0;
    width: 100%;
    text-align: center;
  }

  .product-info {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .product-info img {
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .text-muted {
    color: var(--secondary-color);
    font-size: 0.85rem;
  }
  /* Pagination Styles */
  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin-top: 20px;
    padding-bottom: 20px;
  }

  .pagination-container a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    color: var(--primary-color);
    background: var(--white);
    border: 1px solid var(--light-gray);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: var(--transition);
  }

  .pagination-container a:hover {
    background: var(--primary-color);
    color: var(--white);
    border-color: var(--primary-color);
  }

  .pagination-container .current-page {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: var(--primary-color);
    color: var(--white);
    border: 1px solid var(--primary-color);
    font-size: 0.9rem;
    font-weight: 500;
  }
</style>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<div class="container-fluid">
  <h1 class="mt-4">Order Management</h1>
  <form action="/admin/orders" method="get" class="d-inline">
    <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
        <input type="text" class="form-control border-0 rounded-pill" placeholder="Search Orders" name="search" >
        <button class="btn border-0" type="submit"><i class="fas fa-search"></i></button>
        <a href="/admin/orders" class="btn btn-secondary border-0 clear-btn border border-1 border-grey rounded-pill">Clear</a>

    </div>
</form>

  <div class="card mb-4">
    <div class="card-header">
      <i class="fas fa-table me-1"></i>
      All Orders
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table order-table">
          <thead>
            <tr>
              <th>Order ID</th>
              <th>Date</th>
              <th>Customer</th>
              <th>Product</th>
              <th>Amount</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% orders.forEach(order => { %>
              <tr>
                <td>#<%= order.orderId %></td>
                <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                <td>
                  <div>
                    <strong><%= order.address.name %></strong>
                    <!-- Uncomment if email is needed -->
                    <!-- <div class="text-muted small"><%= order.address.email %></div> -->
                  </div>
                </td>
                <td>
                  <div class="product-info">
                    <!-- <img src="<%= order.orderedItems[0].productImages[0] %>"  -->
                         <!-- alt="<%= order.orderedItems[0].productName %>" 
                         style="width: 50px; height: 50px; object-fit: cover;"> -->
                    <div>
                      <div><%= order.orderedItems[0].productName %></div>
                      <small class="text-muted">Qty: <%= order.orderedItems[0].quantity %></small>
                    </div>
                  </div>
                </td>
                <td>₹<%= Math.round(order.finalAmount) %></td>
                <td>
                  <span class="status-badge <%= 
                    order.status === 'delivered' ? 'bg-success' :
                    order.status === 'cancelled' ? 'bg-danger' :
                    order.status === 'shipped' ? 'bg-info' :
                    order.status === 'return_requested' ? 'bg-warning' :
                    order.status === 'returning' ? 'bg-info' :
                    order.status === 'returned' ? 'bg-secondary' :
                    'bg-primary'
                  %>">
                    <%= order.status.toUpperCase() %>
                  </span>
                  <!-- Uncomment if payment method is needed -->
                  <!-- <% if (order.paymentMethod) { %>
                    <small class="text-muted d-block mt-1">Payment: <%= order.paymentMethod.toUpperCase() %></small>
                  <% } %> -->
                </td>
                <td class="order-actions">
                  <a href="/admin/orders/<%= order._id %>" class="btn btn-primary btn-sm">View Details</a>
                  <% if (order.status === 'return_requested' && order.requestStatus === 'pending') { %>
                    <div class="d-flex flex-column gap-2 mt-2">
                      <button onclick="handleReturn('approve', '<%= order._id %>')" class="btn btn-success btn-sm">Approve</button>
                      <button onclick="handleReturn('reject', '<%= order._id %>')" class="btn btn-danger btn-sm">Reject</button>
                    </div>
                  <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                    <button onclick="updateReturnStatus('<%= order._id %>')" class="btn btn-info btn-sm mt-2">Update Return</button>
                  <% } else if (!['cancelled', 'delivered', 'returned', 'return_requested', 'returning'].includes(order.status)) { %>
                    <div class="d-flex flex-column gap-2 mt-2">
                      <button onclick="updateStatus('<%= order._id %>')" class="btn btn-info btn-sm">Update Status</button>
                      <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-danger btn-sm">Cancel</button>
                    </div>
                  <% } %>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<div class="pagination-container">
  <% if (currentPage > 1) { %>
    <a href="?page=<%= currentPage - 1 %>">«</a>
  <% } %>
  <% for (let i = 1; i <= totalPages; i++) { %>
    <% if (i === currentPage) { %>
      <span class="current-page"><%= i %></span>
    <% } else { %>
      <a href="?page=<%= i %>"><%= i %></a>
    <% } %>
  <% } %>
  <% if (currentPage < totalPages) { %>
    <a href="?page=<%= currentPage + 1 %>">»</a>
  <% } %>
</div>
<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content" style="border-radius: 12px; box-shadow: var(--shadow);">
      <div class="modal-header" style="background: var(--primary-color); color: var(--white); border-radius: 12px 12px 0 0;">
        <h5 class="modal-title">Reject Return Request</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" style="padding: 20px;">
        <div class="mb-3">
          <label class="form-label" style="font-weight: 500;">Rejection Category</label>
          <select class="form-select" id="rejectionCategory" required style="border-radius: 6px; padding: 8px;">
            <option value="">Select a category</option>
            <option value="Invalid reason">Invalid reason</option>
            <option value="Outside return window">Outside return window</option>
            <option value="Product condition">Product condition</option>
            <option value="Policy violation">Policy violation</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label class="form-label" style="font-weight: 500;">Explanation</label>
          <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Provide a detailed explanation..." required style="border-radius: 6px; padding: 8px;"></textarea>
        </div>
      </div>
      <div class="modal-footer" style="border-top: none; padding: 15px 20px;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId) {
  const { value: status } = await Swal.fire({
    title: 'Update Order Status',
    input: 'select',
    inputOptions: {
      'pending': 'Pending',
      'confirmed': 'Confirmed',
      'shipped': 'Shipped',
      'delivered': 'Delivered'
    },
    inputPlaceholder: 'Select status',
    showCancelButton: true,
    inputValidator: (value) => !value && 'Please select a status!'
  });

  if (status) {
    try {
      const response = await fetch('/admin/orders/update-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, status })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Status updated', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to update status', 'error');
    }
  }
}

async function cancelOrder(orderId) {
  const result = await Swal.fire({
    title: 'Cancel Order',
    text: 'Are you sure you want to cancel this order?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#ef476f',
    cancelButtonColor: '#6c757d',
    confirmButtonText: 'Yes, cancel it!'
  });

  if (result.isConfirmed) {
    try {
      const response = await fetch('/admin/orders/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Order cancelled', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to cancel order', 'error');
    }
  }
}

async function handleReturn(action, orderId) {
  currentOrderId = orderId;
  if (action === 'reject') {
    const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
    modal.show();
    return;
  }

  if (action === 'approve') {
    const result = await Swal.fire({
      title: 'Approve Return',
      text: 'Are you sure you want to approve this return?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#06d6a0',
      cancelButtonColor: '#ef476f',
      confirmButtonText: 'Yes, approve!'
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch('/admin/orders/handle-return', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, action })
        });
        const data = await response.json();
        if (data.success) {
          Swal.fire('Approved', 'Return request approved', 'success').then(() => location.reload());
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        Swal.fire('Error', error.message || 'Failed to approve return', 'error');
      }
    }
  }
}

async function submitRejection() {
  const category = document.getElementById('rejectionCategory').value;
  const reason = document.getElementById('rejectionReason').value;

  if (!category || !reason) {
    Swal.fire('Error', 'Please provide both category and explanation', 'error');
    return;
  }

  try {
    const response = await fetch('/admin/orders/handle-return', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ orderId: currentOrderId, action: 'reject', category, message: reason })
    });
    const data = await response.json();
    if (data.success) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
      modal.hide();
      Swal.fire('Rejected', 'Return request rejected', 'success').then(() => location.reload());
    } else {
      throw new Error(data.message);
    }
  } catch (error) {
    Swal.fire('Error', error.message || 'Failed to reject return', 'error');
  }
}

async function updateReturnStatus(orderId) {
  const { value: status } = await Swal.fire({
    title: 'Update Return Status',
    input: 'select',
    inputOptions: {
      'returning': 'Returning',
      'returned': 'Returned'
    },
    inputPlaceholder: 'Select status',
    showCancelButton: true,
    inputValidator: (value) => !value && 'Please select a status!'
  });

  if (status) {
    try {
      const response = await fetch('/admin/orders/update-return-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, status })
      });
      const data = await response.json();
      if (data.success) {
        Swal.fire('Success', 'Return status updated', 'success').then(() => location.reload());
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      Swal.fire('Error', error.message || 'Failed to update status', 'error');
    }
  }
}
</script>

<%- include('../partials/admin/footer') %>