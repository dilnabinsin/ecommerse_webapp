<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product | Admin Panel</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    
    <!-- Cropper.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    
    <!-- Toastify CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.css">
    
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #f8f9fc;
            --success-color: #1cc88a;
            --danger-color: #e74a3b;
            --warning-color: #f6c23e;
            --text-color: #5a5c69;
        }
        
        body {
            background-color: #f8f9fc;
            color: var(--text-color);
            font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }
        
        .main-content {
            background: white;
            border-radius: 15px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            padding: 2rem;
            margin: 2rem auto;
            max-width: 1200px;
        }
        
        .page-title {
            color: var(--primary-color);
            font-weight: 700;
            margin-bottom: 2rem;
            border-bottom: 1px solid #e3e6f0;
            padding-bottom: 1rem;
        }
        
        .form-section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .form-section h4 {
            color: var(--primary-color);
            margin-bottom: 1.5rem;
            font-weight: 600;
        }
        
        .form-control, .form-select {
            border-radius: 0.35rem;
            padding: 0.75rem 1rem;
            border: 1px solid #d1d3e2;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 0.5rem 1.5rem;
            font-weight: 600;
            border-radius: 0.35rem;
        }
        
        .btn-primary:hover {
            background-color: #2e59d9;
            border-color: #2653d4;
        }
        
        .image-thumbnail {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 10px;
            margin-bottom: 10px;
            border: 1px solid #e3e6f0;
            transition: transform 0.2s;
        }
        
        .image-thumbnail:hover {
            transform: scale(1.05);
        }
        
        .delete-image-btn {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--danger-color);
            color: white;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 12px;
            border: none;
        }
        
        .delete-image-btn:hover {
            background: #c0352a;
        }
        
        .image-container {
            position: relative;
            display: inline-block;
            margin-right: 15px;
            margin-bottom: 15px;
        }
        
        #cropperContainer {
            background: #f8f9fc;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
        }
        
        .cropper-item {
            margin-bottom: 15px;
        }
        
        #saveAllButton {
            margin-top: 15px;
        }
        
        .publish-btn {
            background-color: var(--success-color);
            border-color: var(--success-color);
            padding: 0.75rem 2rem;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .publish-btn:hover {
            background-color: #17a673;
            border-color: #169b6b;
        }
        
        .alert {
            border-radius: 0.35rem;
        }
        
        .price-input-group {
            display: flex;
            align-items: center;
        }
        
        .price-input-group span {
            background-color: #e9ecef;
            padding: 0.375rem 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem 0 0 0.25rem;
        }
        
        .price-input-group input {
            border-radius: 0 0.25rem 0.25rem 0;
        }
    </style>
</head>

<body>
    <div class="main-content">
        <h1 class="page-title text-center">
            <i class="fas fa-edit me-2"></i>Edit Product
        </h1>
        
        <% if (error) { %>
            <div class="alert alert-danger alert-dismissible fade show">
                <i class="fas fa-exclamation-circle me-2"></i>
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <% if (success) { %>
            <div class="alert alert-success alert-dismissible fade show">
                <i class="fas fa-check-circle me-2"></i>
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <form id="productForm" action="/admin/editProduct/<%=product._id%>" method="POST" enctype="multipart/form-data">
            <div class="row">
                <!-- Left Column - Product Details -->
                <div class="col-md-8">
                    <div class="form-section">
                        <h4><i class="fas fa-info-circle me-2"></i>Product Information</h4>
                        
                        <div class="mb-3">
                            <label class="form-label">Product Name</label>
                            <input type="text" name="productName" class="form-control" value="<%=product.productName%>" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Short Description</label>
                            <textarea name="description" id="descriptionid" class="form-control" rows="3" required><%= product.description %></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Full Description</label>
                            <textarea name="fulldescription" id="fulldescriptionid" class="form-control" rows="5" required><%= product.fulldescription %></textarea>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h4><i class="fas fa-tags me-2"></i>Pricing & Inventory</h4>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Regular Price</label>
                                <div class="price-input-group">
                                    <span>$</span>
                                    <input type="number" name="regularPrice" class="form-control" value="<%=product.regularPrice%>" step="0.01" min="0" required>
                                </div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Sale Price</label>
                                <div class="price-input-group">
                                    <span>$</span>
                                    <input type="number" name="salePrice" class="form-control" value="<%=product.salePrice%>" step="0.01" min="0" required>
                                </div>
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Quantity in Stock</label>
                                <input type="number" name="quantity" class="form-control" value="<%=product.quantity%>" min="0" required>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Right Column - Category & Images -->
                <div class="col-md-4">
                    <div class="form-section">
                        <h4><i class="fas fa-folder me-2"></i>Category</h4>
                        
                        <div class="mb-3">
                            <select name="category" class="form-select" required>
                                <% if (categories && categories.length > 0) { %>
                                    <% for (let i = 0; i < categories.length; i++) { %>
                                        <option value="<%= categories[i]._id %>"
                                            <% if (product.category && categories[i]._id.toString() === product.category._id.toString()) { %> selected <% } %>>
                                            <%= categories[i].name %>
                                          </option>
                                    <% } %>
                                <% } else { %>
                                    <option disabled>No categories available</option>
                                <% } %>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h4><i class="fas fa-palette me-2"></i>Attributes</h4>
                        
                        <div class="mb-3">
                            <label class="form-label">Fabric/Material</label>
                            <input type="text" name="brand" class="form-control" value="<%=product.brand%>" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <input type="text" name="color" class="form-control" value="<%=product.color%>" required>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h4><i class="fas fa-images me-2"></i>Product Images</h4>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Images</label>
                            <div class="d-flex flex-wrap">
                                <% for(let i = 0; i < product.productImage.length; i++) { %>
                                    <div class="image-container">
                                        <input type="hidden" value="<%= product.productImage[i] %>" name="existingImages">
                                        <img class="image-thumbnail" src="<%= product.productImage[i] %>" alt="Product Image">
                                        <button type="button" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')" 
                                            class="delete-image-btn" title="Delete Image">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Add New Images</label>
                            <input class="form-control" type="file" name="images" id="imageInput" accept="image/png, image/jpeg, image/jpg" multiple>
                            <small class="text-muted">Upload at least 3 images total (existing + new)</small>
                        </div>
                        
                        <div id="imagePreviews" class="d-flex flex-wrap gap-3 mb-3"></div>
                        
                        <div class="image-cropper d-flex flex-wrap gap-3" id="cropperContainer" style="display:none;"></div>
                        
                        <button type="button" id="saveAllButton" class="btn btn-primary w-100" style="display:none;">
                            <i class="fas fa-save me-2"></i>Save All Cropped Images
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="text-center mt-4">
                <button class="btn publish-btn" type="button" onclick="validateAndSubmit()">
                    <i class="fas fa-save me-2"></i>Update Product
                </button>
            </div>
        </form>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>
    
    <script>
        // Global variables
        let filesArray = [];
        let cropperInstances = {};
        const existingImages = JSON.parse('<%- JSON.stringify(product.productImage || []) %>');

        // Initialize when DOM is loaded
        document.addEventListener("DOMContentLoaded", function () {
            const imagePreviews = document.getElementById('imagePreviews');
            const cropperContainer = document.getElementById('cropperContainer');
            const inputElement = document.getElementById('imageInput');
            const saveAllButton = document.getElementById('saveAllButton');

            // Handle image upload
            inputElement.addEventListener("change", function (event) {
                const newFiles = Array.from(event.target.files);

                newFiles.forEach((file) => {
                    if (!file.type.startsWith("image/")) {
                        showToast("Please upload only image files (JPEG, PNG)", "error");
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const actualIndex = filesArray.length;

                        filesArray.push(file);
                        updateInputFiles();

                        // Create preview image
                        const previewImg = document.createElement('img');
                        previewImg.id = `imgView${actualIndex}`;
                        previewImg.src = e.target.result;
                        previewImg.className = 'image-thumbnail';
                        imagePreviews.appendChild(previewImg);

                        // Create cropper container
                        const cropperDiv = document.createElement('div');
                        cropperDiv.className = 'cropper-item';
                        
                        const croppedImg = document.createElement('img');
                        croppedImg.id = `croppedImg${actualIndex}`;
                        croppedImg.src = e.target.result;
                        croppedImg.style.maxWidth = '100%';
                        
                        const deleteIcon = document.createElement('button');
                        deleteIcon.className = 'delete-image-btn';
                        deleteIcon.innerHTML = '<i class="fas fa-times"></i>';
                        deleteIcon.onclick = () => {
                            const currentIndex = Array.from(cropperContainer.children).indexOf(cropperDiv);
                            deleteImage(currentIndex);
                        };

                        cropperDiv.appendChild(croppedImg);
                        cropperDiv.appendChild(deleteIcon);
                        cropperContainer.appendChild(cropperDiv);

                        // Initialize cropper
                        cropperInstances[actualIndex] = new Cropper(croppedImg, {
                            aspectRatio: 1,
                            viewMode: 2,
                            autoCropArea: 1,
                            responsive: true,
                        });

                        cropperContainer.style.display = 'flex';
                        saveAllButton.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                });
            });

            // Set up save all button
            saveAllButton.addEventListener('click', saveAllImages);
        });

        // Save all cropped images
        async function saveAllImages() {
            const cropPromises = filesArray.map((file, index) => {
                return new Promise((resolve) => {
                    const cropper = cropperInstances[index];
                    if (cropper) {
                        cropper.getCroppedCanvas({ width: 800, height: 800 }).toBlob((blob) => {
                            const newFile = new File([blob], `cropped_${file.name}`, { type: "image/jpeg" });
                            const previewImg = document.getElementById(`imgView${index}`);
                            if (previewImg) {
                                previewImg.src = URL.createObjectURL(newFile);
                            }
                            resolve(newFile);
                        }, 'image/jpeg', 0.9); // 90% quality
                    } else {
                        resolve(file);
                    }
                });
            });

            try {
                const croppedFiles = await Promise.all(cropPromises);
                filesArray = croppedFiles;
                updateInputFiles();
                showToast("All images cropped and saved successfully!", "success");
            } catch (error) {
                console.error("Error cropping images:", error);
                showToast("Failed to crop images!", "error");
            }
        };

        // Delete uploaded image
        function deleteImage(index) {
            if (index < 0 || index >= filesArray.length) {
                showToast("Cannot delete: Image not found!", "error");
                return;
            }

            filesArray.splice(index, 1);
            updateInputFiles();

            const imagePreviews = document.getElementById('imagePreviews');
            const previewImg = imagePreviews.children[index];
            if (previewImg) previewImg.remove();

            const cropperContainer = document.getElementById('cropperContainer');
            const cropperItem = cropperContainer.children[index];
            if (cropperItem) {
                const croppedImg = cropperItem.querySelector('img');
                const oldIndex = parseInt(croppedImg.id.replace('croppedImg', ''), 10);
                cropperItem.remove();

                if (cropperInstances[oldIndex]) {
                    cropperInstances[oldIndex].destroy();
                    delete cropperInstances[oldIndex];
                }
            }

            // Reindex remaining elements
            const newCropperInstances = {};
            Array.from(cropperContainer.children).forEach((item, newIndex) => {
                const img = item.querySelector('img');
                const icon = item.querySelector('button');
                if (img && icon) {
                    const oldIndex = parseInt(img.id.replace('croppedImg', ''), 10);
                    img.id = `croppedImg${newIndex}`;
                    icon.onclick = () => deleteImage(newIndex);
                    if (cropperInstances[oldIndex]) {
                        newCropperInstances[newIndex] = cropperInstances[oldIndex];
                    }
                }
            });
            cropperInstances = newCropperInstances;

            Array.from(imagePreviews.children).forEach((img, newIndex) => {
                img.id = `imgView${newIndex}`;
            });

            if (filesArray.length === 0) {
                cropperContainer.style.display = 'none';
                document.getElementById('saveAllButton').style.display = 'none';
            }

            showToast("Image deleted successfully!", "success");
        };

        // Validate and submit form
        async function validateAndSubmit() {
            const form = document.getElementById("productForm");
            const formData = new FormData(form);

            // Get form values
            const productName = formData.get("productName")?.trim();
            const description = formData.get("description")?.trim();
            const fulldescription = formData.get("fulldescription")?.trim();
            const color = formData.get("color")?.trim();
            const brand = formData.get("brand")?.trim();
            const regularPrice = parseFloat(formData.get("regularPrice"));
            const salePrice = parseFloat(formData.get("salePrice"));
            const quantity = parseInt(formData.get("quantity"));
            const totalImages = filesArray.length + existingImages.length;

            // Validate required fields
            if (!productName || !description || !fulldescription || !color || !brand || 
                isNaN(regularPrice) || isNaN(salePrice) || isNaN(quantity)) {
                showToast("Please fill in all required fields with valid values!", "error");
                return false;
            }

            // Validate prices
            if (regularPrice < 0 || salePrice < 0) {
                showToast("Prices cannot be negative!", "error");
                return false;
            }

            if (salePrice > regularPrice) {
                showToast("Sale price cannot be higher than regular price!", "error");
                return false;
            }

            // Validate quantity
            if (quantity < 0) {
                showToast("Quantity cannot be negative!", "error");
                return false;
            }

            // Validate images
            if (totalImages < 3) {
                showToast("Please ensure at least three images are present (existing + new)!", "error");
                return false;
            }

            // Show loading state
            const submitBtn = document.querySelector('.publish-btn');
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';

            // Prepare form data
            updateInputFiles();
            formData.delete("images");
            filesArray.forEach(file => formData.append("images", file));

            try {
                const response = await fetch(`/admin/editProduct/<%=product._id%>`, {
                    method: "POST",
                    body: formData,
                });

                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;

                // Handle response
                const contentType = response.headers.get("content-type");
                if (contentType && contentType.includes("application/json")) {
                    const result = await response.json();

                    if (result.success) {
                        showToast(result.success, "success");
                        setTimeout(() => {
                            window.location.href = "/admin/products";
                        }, 1500);
                    } else {
                        showToast(result.error || "Unknown error occurred", "error");
                    }
                } else {
                    const text = await response.text();
                    console.error("Non-JSON response:", text);
                    showToast("Unexpected server response. Check console for details.", "error");
                }
            } catch (error) {
                console.error("Error submitting form:", error);
                showToast("An error occurred. Please try again.", "error");
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            }
        };

        // Update input files
        function updateInputFiles() {
            const inputElement = document.getElementById('imageInput');
            const dataTransfer = new DataTransfer();
            filesArray.forEach(file => dataTransfer.items.add(file));
            inputElement.files = dataTransfer.files;
        }

        // Show toast notification
        function showToast(message, type = "info") {
            const background = type === "error" ? "#e74a3b" : 
                           type === "success" ? "#1cc88a" : "#4e73df";
            
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                backgroundColor: background,
                stopOnFocus: true,
                className: "toastify-custom",
            }).showToast();
        }

        // Delete existing image
        function deleteSingleImage(imageId, productId) {
            if (!confirm("Are you sure you want to delete this image?")) return;
            
            showToast("Deleting image...", "info");
            
            $.ajax({
                url: "/admin/deleteImage",
                method: 'POST',
                data: { 
                    imageNameToServer: imageId, 
                    productIdToServer: productId 
                },
                success: (response) => {
                    if (response.status === true) {
                        showToast("Image deleted successfully!", "success");
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        showToast(response.message || "Failed to delete image", "error");
                    }
                },
                error: (err) => {
                    console.error("Error deleting image:", err);
                    showToast("Failed to delete image!", "error");
                }
            });
        }
    </script>
</body>
</html>